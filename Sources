* From Abstract:

Working Topic: Painter’s algorithm
https://en.wikipedia.org/wiki/Painter%27s_algorithm

Math stuff (more related to camera POV)
http://aldream.net/article/2013-04-13-painter-s-algorithm

Some pseudocode (helpful but it’s a forum so idk how we would cite this)
http://www.experts-exchange.com/questions/27183782/Painter's-Algorithm-Implementation.html

Related solution:
https://en.wikipedia.org/wiki/Z-buffering 

C code for the algorithm (from Silicon Graphics Inc., somewhat outdated, I believe it’s open source)
http://www.sv.vt.edu/classes/opengl/examples/depth_buffer/painter.c 

Bunch of C code
http://www.csee.umbc.edu/~squire/cs437_l9a.html





*Found since Abstract

// A C++ implementation of Depth Sorting (another name for the Painter's Algorithm)
http://www.visualizationlibrary.org/documentation/pag_guide_polygon_depth_sorting.html 

// Psuedocode and Overview of the algorithm
http://onlinemca.com/mca_course/kurukshetra_university/semester5/computergraphics/painter_algorithm.php

// Overview of GPU / Painter's Algorithm
http://compsci.hunter.cuny.edu/~sweiss/course_materials/csci360/lecture_notes/gpus.pdf

//Javascript implementations (skip down the page or just do a ctrl-f for "painter"):
http://www.cores2.com/3D_Tutorial/#development-tools-conventions
http://www.garybeene.com/3d/3d-purejs.htm

//Paper on rendering 3D scene, some info onf Painter's Algorithm
https://hal-upec-upem.archives-ouvertes.fr/hal-00622389/document

//More detailed description of how GPUs create scenes
https://www.google.com/patents/US7499051

//OpenGL info article on depth sort
https://www.opengl.org/wiki/Transparency_Sorting#Depth_Sorting

//Another similar algorithm for the visibility problem
http://www.idav.ucdavis.edu/education/GraphicsNotes/Z-Buffer-Algorithm.pdf

//Specifications of GTX 970 Graphics Card
http://www.geforce.com/hardware/desktop-gpus/geforce-gtx-970/specifications
